// path: src/screens/Welcome/components/MatchCard.tsx

import { MaterialCommunityIcons } from '@expo/vector-icons';
import { Image } from 'expo-image';
import React, { useCallback, useMemo } from 'react';
import { Alert, Text, TouchableOpacity, View } from 'react-native';
import Animated, { FadeInDown, FadeInUp } from 'react-native-reanimated';
import { usePlayerStore } from 'store/playerStore';
import { Match } from 'types/firebase';

// ‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ Firestore
import auth from '@react-native-firebase/auth';
import { arrayUnion, doc, updateDoc } from '@react-native-firebase/firestore';
import { db } from 'services/firebase/init';

import { styles } from '../WelcomeScreen.styles';

interface Props {
  item: Match;
  onWaze: (location: string) => void;
  onWhatsApp: (phone?: string) => void;
  onCall: (phone?: string) => void;

  // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤–Ω–µ—à–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
  onAddPlayer?: (matchId: string) => Promise<void> | void;
}

const AVATAR_SIZE = 58;
const AVATAR_RADIUS = 36;

const MatchCard: React.FC<Props> = ({ item, onWaze, onWhatsApp, onCall, onAddPlayer }) => {
  // ‚õëÔ∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
  const players: string[] = useMemo(
    () => (Array.isArray(item.players) ? item.players : []),
    [item.players]
  );

  // üéØ –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: 2 (singles) –∏–ª–∏ 4 (doubles) ‚Äî –ª–∏–±–æ –±–µ—Ä—ë–º maxPlayers
  const capacity = item.maxPlayers ?? (item.singles ? 2 : 4);
  const isFull = (item.playersCount ?? players.length) >= capacity;

  // üìí –ë–µ—Ä—ë–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Å—Ç–æ—Ä–∞ (–¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤/–∏–Ω–∏—Ü–∏–∞–ª–æ–≤)
  const playerStore = usePlayerStore();
  const profiles = useMemo(
    () => players.map((uid) => playerStore.players[uid] || { id: uid }),
    [players, playerStore.players]
  );

  // –ò–Ω—Ñ–æ-—Å—Ç—Ä–æ–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
  const lines = [
    `‚Ç™${Number.isFinite(Number(item.price)) ? Number(item.price) : 0}`,
    String(item.location ?? '‚Äî'),
    `Level ${Number(item.level ?? 0)}`,
    item.sport,
  ];

  // üß© –ò–Ω–∏—Ü–∏–∞–ª—ã, –µ—Å–ª–∏ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞
  const initials = (name?: string | null) =>
    (name ?? '')
      .trim()
      .split(/\s+/)
      .map((p) => p[0])
      .filter(Boolean)
      .slice(0, 2)
      .join('')
      .toUpperCase();

  // ‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –º–∞—Ç—á—É
  const addSelfToMatch = useCallback(async () => {
    try {
      if (isFull) return;

      // –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ‚Äî –æ—Ç–¥–∞—ë–º –µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      if (onAddPlayer) {
        await onAddPlayer(item.id!);
        return;
      }

      const user = auth().currentUser;
      if (!user?.uid) {
        Alert.alert('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–∞—Ç—á—É.');
        return;
      }

      const matchRef = doc(db, 'matches', String(item.id));
      await updateDoc(matchRef, {
        // arrayUnion –∏—Å–∫–ª—é—á–∏—Ç –¥—É–±–ª–∏
        players: arrayUnion(user.uid),
        playersCount:
          (item.playersCount ?? players.length) + (players.includes(user.uid) ? 0 : 1),
        updatedAt: Date.now(),
      });

      Alert.alert('–£—Å–ø–µ—Ö', '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –º–∞—Ç—á—É!');
      // ‚ö†Ô∏è –£–¥–∞–ª—è—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî WelcomeScreen –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–ø–æ–ª–Ω—ë–Ω–Ω—ã–µ
    } catch (e: any) {
      console.warn('addSelfToMatch error:', e);
      Alert.alert('–û—à–∏–±–∫–∞', e?.message ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.');
    }
  }, [isFull, onAddPlayer, item.id, item.playersCount, players]);

  // –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç (–¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ "+")
  const hasFreeSlot = profiles.length < capacity;

  return (
    <Animated.View entering={FadeInDown.duration(300)} style={styles.card}>
      {/* –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏: –ø—Ä–µ–≤—å—é, –ª–æ–∫–∞—Ü–∏—è, —Ü–µ–Ω–∞ –∏ —Ç.–ø. */}
      <View style={styles.topRow}>
        {item.imageUrl ? (
          <Image source={{ uri: item.imageUrl }} style={{ width: 108, height: 88, borderRadius: 12 }} />
        ) : (
          <View style={styles.thumbPlaceholder}>
            <Text style={styles.thumbPlaceholderText}>No image</Text>
          </View>
        )}

        <View style={styles.infoCol}>
          <Text style={styles.primaryLine}>{lines[0]}</Text>
          <Text style={styles.line} numberOfLines={1}>{lines[1]}</Text>
          <Text style={styles.line}>{lines[2]}</Text>
          <Text style={styles.line}>{lines[3]}</Text>

          <View style={styles.iconRow}>
            <TouchableOpacity style={styles.iconButton} onPress={() => onWaze(String(item.location))}>
              <MaterialCommunityIcons name="waze" size={22} color="#325df6" />
            </TouchableOpacity>
            <TouchableOpacity style={styles.iconButton} disabled={!item.phone} onPress={() => onWhatsApp(item.phone)}>
              <MaterialCommunityIcons name="whatsapp" size={22} color={item.phone ? '#25D366' : '#BDBDBD'} />
            </TouchableOpacity>
            <TouchableOpacity style={styles.iconButton} disabled={!item.phone} onPress={() => onCall(item.phone)}>
              <MaterialCommunityIcons name="phone" size={22} color={item.phone ? '#4CAF50' : '#BDBDBD'} />
            </TouchableOpacity>
          </View>
        </View>
      </View>

      {/* –†—è–¥ –∞–≤–∞—Ç–∞—Ä–æ–≤ ‚Äî –±–µ–∑ —Å–∫—Ä–æ–ª–ª–∞, —Ä–æ–≤–Ω–æ capacity —Å–ª–æ—Ç–æ–≤ */}
      <View style={[styles.avatarsRow, { flexDirection: 'row' }]}>
        {Array.from({ length: capacity }).map((_, idx) => {
          const p = profiles[idx];

          // —Å–ª–æ—Ç –∑–∞–Ω—è—Ç ‚Äî —Ä–∏—Å—É–µ–º –∞–≤–∞—Ç–∞—Ä/–∏–Ω–∏—Ü–∏–∞–ª—ã
          if (p) {
            return (
              <Animated.View
                entering={FadeInUp.delay(idx * 80)}
                key={`${p.id}-${idx}`}
                style={{
                  width: AVATAR_SIZE,
                  height: AVATAR_SIZE,
                  borderRadius: AVATAR_RADIUS,
                  overflow: 'hidden',
                  alignItems: 'center',
                  justifyContent: 'center',
                  backgroundColor: '#EEE',
                  marginRight: 8,
                }}
              >
                {p.avatar ? (
                  <Image
                    source={{ uri: p.avatar }}
                    style={{ width: AVATAR_SIZE, height: AVATAR_SIZE, borderRadius: AVATAR_RADIUS }}
                  />
                ) : (
                  <Text style={styles.avatarText}>{initials(p.name) || '??'}</Text>
                )}
              </Animated.View>
            );
          }

          // –ø–µ—Ä–≤—ã–π –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç –ø—Ä–∏ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –º–∞—Ç—á–µ ‚Äî —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ "+"
          if (!isFull && idx === profiles.length && hasFreeSlot) {
            return (
              <TouchableOpacity
                key={`plus-${idx}`}
                onPress={addSelfToMatch}
                activeOpacity={0.85}
                style={{
                  width: AVATAR_SIZE,
                  height: AVATAR_SIZE,
                  borderRadius: AVATAR_RADIUS,
                  borderWidth: 2,
                  borderStyle: 'dashed',
                  borderColor: '#7CB342',
                  alignItems: 'center',
                  justifyContent: 'center',
                  marginRight: 8,
                  backgroundColor: '#F9FBE7',
                }}
              >
                <MaterialCommunityIcons name="plus" size={28} color="#558B2F" />
              </TouchableOpacity>
            );
          }

          // –ø—Ä–æ—á–∏–µ –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã ‚Äî –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
          return (
            <View
              key={`ph-${idx}`}
              style={{
                width: AVATAR_SIZE,
                height: AVATAR_SIZE,
                borderRadius: AVATAR_RADIUS,
                backgroundColor: '#F1F1F1',
                marginRight: 8,
              }}
            />
          );
        })}
      </View>

      {/* Join-–∫–Ω–æ–ø–∫–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ "+" */}
      <TouchableOpacity
        style={[styles.joinButton, isFull && styles.joinButtonDisabled]}
        disabled={isFull}
        onPress={addSelfToMatch}
      >
        <Text style={styles.joinText}>{isFull ? 'Full' : 'Join'}</Text>
      </TouchableOpacity>
    </Animated.View>
  );
};

function areEqual(prev: Props, next: Props) {
  return prev.item.id === next.item.id;
}

export default React.memo(MatchCard, areEqual);
